/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from "./typechain";

interface UniswapV2PairInterface extends Interface {
  functions: {
    DOMAIN_SEPARATOR: TypedFunctionDescription<{ encode([]: []): string }>;

    MINIMUM_LIQUIDITY: TypedFunctionDescription<{ encode([]: []): string }>;

    PERMIT_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    allowance: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([]: [string]): string }>;

    burn: TypedFunctionDescription<{ encode([to]: [string]): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    factory: TypedFunctionDescription<{ encode([]: []): string }>;

    getReserves: TypedFunctionDescription<{ encode([]: []): string }>;

    initialize: TypedFunctionDescription<{
      encode([_token0, _token1]: [string, string]): string;
    }>;

    kLast: TypedFunctionDescription<{ encode([]: []): string }>;

    mint: TypedFunctionDescription<{ encode([to]: [string]): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    nonces: TypedFunctionDescription<{ encode([]: [string]): string }>;

    permit: TypedFunctionDescription<{
      encode([owner, spender, value, deadline, v, r, s]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    price0CumulativeLast: TypedFunctionDescription<{ encode([]: []): string }>;

    price1CumulativeLast: TypedFunctionDescription<{ encode([]: []): string }>;

    skim: TypedFunctionDescription<{ encode([to]: [string]): string }>;

    swap: TypedFunctionDescription<{
      encode([amount0Out, amount1Out, to, data]: [
        BigNumberish,
        BigNumberish,
        string,
        Arrayish
      ]): string;
    }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    sync: TypedFunctionDescription<{ encode([]: []): string }>;

    token0: TypedFunctionDescription<{ encode([]: []): string }>;

    token1: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, value]: [string, string, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
          string | null,
          string | null,
        null
      ]): string[];
    }>;

    Burn: TypedEventDescription<{
      encodeTopics([sender, amount0, amount1, to]: [
          string | null,
        null,
        null,
          string | null
      ]): string[];
    }>;

    Mint: TypedEventDescription<{
      encodeTopics([sender, amount0, amount1]: [
          string | null,
        null,
        null
      ]): string[];
    }>;

    Swap: TypedEventDescription<{
      encodeTopics([sender, amount0In, amount1In, amount0Out, amount1Out, to]: [
          string | null,
        null,
        null,
        null,
        null,
          string | null
      ]): string[];
    }>;

    Sync: TypedEventDescription<{
      encodeTopics([reserve0, reserve1]: [null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
          string | null,
          string | null,
        null
      ]): string[];
    }>;
  };
}

export class UniswapV2Pair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UniswapV2Pair;
  attach(addressOrName: string): UniswapV2Pair;
  deployed(): Promise<UniswapV2Pair>;

  on(event: EventFilter | string, listener: Listener): UniswapV2Pair;
  once(event: EventFilter | string, listener: Listener): UniswapV2Pair;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): UniswapV2Pair;
  removeAllListeners(eventName: EventFilter | string): UniswapV2Pair;
  removeListener(eventName: any, listener: Listener): UniswapV2Pair;

  interface: UniswapV2PairInterface;

  functions: {
    DOMAIN_SEPARATOR(): Promise<string>;

    MINIMUM_LIQUIDITY(): Promise<BigNumber>;

    PERMIT_TYPEHASH(): Promise<string>;

    allowance(arg0: string, arg1: string): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string): Promise<BigNumber>;

    burn(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decimals(): Promise<number>;

    factory(): Promise<string>;

    getReserves(): Promise<{
      _reserve0: BigNumber;
      _reserve1: BigNumber;
      _blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    initialize(
      _token0: string,
      _token1: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    kLast(): Promise<BigNumber>;

    mint(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(): Promise<string>;

    nonces(arg0: string): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    price0CumulativeLast(): Promise<BigNumber>;

    price1CumulativeLast(): Promise<BigNumber>;

    skim(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(): Promise<string>;

    sync(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    token0(): Promise<string>;

    token1(): Promise<string>;

    totalSupply(): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(): Promise<string>;

  MINIMUM_LIQUIDITY(): Promise<BigNumber>;

  PERMIT_TYPEHASH(): Promise<string>;

  allowance(arg0: string, arg1: string): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string): Promise<BigNumber>;

  burn(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decimals(): Promise<number>;

  factory(): Promise<string>;

  getReserves(): Promise<{
    _reserve0: BigNumber;
    _reserve1: BigNumber;
    _blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  initialize(
    _token0: string,
    _token1: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  kLast(): Promise<BigNumber>;

  mint(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  name(): Promise<string>;

  nonces(arg0: string): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  price0CumulativeLast(): Promise<BigNumber>;

  price1CumulativeLast(): Promise<BigNumber>;

  skim(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  swap(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(): Promise<string>;

  sync(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  token0(): Promise<string>;

  token1(): Promise<string>;

  totalSupply(): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Burn(
      sender: string | null,
      amount0: null,
      amount1: null,
      to: string | null
    ): EventFilter;

    Mint(sender: string | null, amount0: null, amount1: null): EventFilter;

    Swap(
      sender: string | null,
      amount0In: null,
      amount1In: null,
      amount0Out: null,
      amount1Out: null,
      to: string | null
    ): EventFilter;

    Sync(reserve0: null, reserve1: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    DOMAIN_SEPARATOR(): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(): Promise<BigNumber>;

    PERMIT_TYPEHASH(): Promise<BigNumber>;

    allowance(arg0: string, arg1: string): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish): Promise<BigNumber>;

    balanceOf(arg0: string): Promise<BigNumber>;

    burn(to: string): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    factory(): Promise<BigNumber>;

    getReserves(): Promise<BigNumber>;

    initialize(_token0: string, _token1: string): Promise<BigNumber>;

    kLast(): Promise<BigNumber>;

    mint(to: string): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    nonces(arg0: string): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish
    ): Promise<BigNumber>;

    price0CumulativeLast(): Promise<BigNumber>;

    price1CumulativeLast(): Promise<BigNumber>;

    skim(to: string): Promise<BigNumber>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish
    ): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    sync(): Promise<BigNumber>;

    token0(): Promise<BigNumber>;

    token1(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish
    ): Promise<BigNumber>;
  };
}
